#!/bin/bash 

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

Help()
{
  echo
  echo "------------------------------------------------------------------------------------------------"
  echo "---------------------------------------PROJECT 1------------------------------------------------"
  echo "------------------------------------------IOS---------------------------------------------------"
  echo "---------------------------------------2020/2021------------------------------------------------"
  echo "--------------------------------Taipova Evgeniya (xtaipo00)-------------------------------------"
  echo "------------------------------------------------------------------------------------------------"
  echo "Usage: tradelog [-h|--help] [FILTR] [PŘÍKAZ] [LOGS]"
  echo
  echo "PŘÍKAZ:
  list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. “tickerů”.
  profit – výpis celkového zisku z uzavřených pozic.
  pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty.
  last-price – výpis poslední známé ceny pro každý ticker.
  hist-ord – výpis histogramu počtu transakcí dle tickeru.
  graph-pos – výpis grafu hodnot držených pozic dle tickeru."
  echo
  echo "FILTR:
  -a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). 
  -b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data).
     DATETIME je formátu YYYY-MM-DD HH:MM:SS.
  -t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru.
  -w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH. 
  WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění."
  echo
} 

file_log_gz=""
file=""
list=""
TICKER=""
profit=""
lastprice=""
hist=""
after_before="after"
after_before="before"
datetime=""

# Skript kontroluje všechny zadané příkazy, filtry a soubory.
while [ "$#" -gt 0 ]
do
  case "$1" in

    -h|--help)  Help ; exit 0;;

    *.log) file_log_gz=$1;;

    *.gz) file_log_gz=$1;;

    list-tick) list="exist" ;;

    -t) ticker="exist"; TICKER="$TICKER $2;"; shift ;; 

    profit) profit="exist";;

    last-price) lastprice="exist";;

    hist-ord) hist="exist";;

    -a) after_before="after"; datetime="$2"; shift ;;   

    -b) after_before="before"; datetime="$2"; shift ;;

    *) echo "Operator $1 neexistuje. Chcete pomoc? Zkuste [-h|--help]"; exit 0
  esac
shift
done

# V případě potřeby archiv rozbalíme. Připravíme soubor do práce.
if [[ $file_log_gz =~ \.log.gz ]]
then
file="gzip -d -c $file_log_gz | cat - |"
else  
file="cat $file_log_gz |"
fi

# Pokud je zadán list-tick, zobrazíme tickery v abecedním pořadí bez opakování.
if [[ $list = "exist" ]]
then
eval "$file awk -F\";\" '{print \$2}' | sort | uniq" 
fi

# Funkce prof najde sumu hodnot sell transakcí, pak sumu hodnot buy transakcí.
# Pak suma hodnot sell transakcí - suma hodnot buy transakcí.
# Hodnota transakce je JEDNOTKOVA CENA * OBJEM
# Hodnota transakce je $2*$4
prof()
{
  if [[ $ticker = "exist" ]]
  then 
  eval "$file awk -F\";\"  '{if (\"$TICKER\" ~ \$2\";\" && \$3==\"sell\") s=s+\$4*\$6; 
  if(\"$TICKER\" ~ \$2\";\" && \$3==\"buy\") b=b+\$4*\$6 
  c=s-b}
  END {printf(\"%.2f\n\", c)}'" 
  else
  eval "$file awk -F\";\" '{if (\$3==\"sell\") s=s+\$4*\$6
  else b=b+\$4*\$6
  c=s-b}
  END {printf \"%.2f\n\", c}'"
  fi
  exit 0
}

#  Pokud je zadán profit, použijeme funkci prof.
if [[ $profit = "exist" ]]
then
prof
fi

#  Pokud je zadán ticker, zobrazíme řádky, ve kterých se daný ticker nachází/
if [[ $ticker = "exist" ]]
then
eval "$file awk -F \";\" '(\"$TICKER\" ~ \$2\";\") {print \$0}'"
fi

# Pokud je zadán last-price, zobrazíme ticker a jeho poslední cenu.
if [[ $lastprice = "exist" ]]
then
eval "$file  awk -F\";\" '{printf \"%-10s: %7.2f\n\", \$2, \$4}' | 
      tac | sort -u -k 1,1"
fi

# Pokud je zadán hist-ord, spočítáme množství každého tickeru, potom se množství zobrazí jako #.
if [[ $hist = "exist" ]]
then 
 eval "$file awk -F\";\" '{printf \"%-9s : \n\", \$2 }' | sort | uniq -c|
 awk '{ord=\$1;abs=\"\";for(ord;ord>=1;ord--)abs=sprintf(\"%s%s\",abs,\"#\"); 
 printf(\"%-10s: %s\n\",\$2, abs)}'"
fi

#-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data).
if [[ "$after_before" = "after" ]]; then
eval "$file awk -F \";\" '{if (\"$datetime\" <  \$1) print \$0}'"
#-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data).
elif [ "$after_before" = "before" ]; then
eval "$file awk -F \";\" '{if (\"$datetime\" > \$1) print \$0}'"
fi